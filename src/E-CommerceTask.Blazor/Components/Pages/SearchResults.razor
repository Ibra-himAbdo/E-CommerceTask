@page "/search"
@inject IProductService ProductService

<PageTitle>Search Results</PageTitle>

<MudText Typo="Typo.h4" Class="my-4">Search Results for "@_searchQuery"</MudText>

@if (!_products.Any())
{
    <MudText Typo="Typo.h5" Class="mx-auto my-15">No products found matching your search.</MudText>
}
else
{
    <MudGrid Spacing="3" Justify="Justify.FlexStart">
        @foreach (var product in _products)
        {
            <MudItem xs="12" sm="4" md="3" lg="2">
                <ProductCard Product="@product" />
            </MudItem>
        }
    </MudGrid>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? query { get; set; }

    private string _searchQuery = string.Empty;
    private IEnumerable<Product> _products = [];

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(query))
        {
            _searchQuery = query;
            await SearchProducts();
        }
    }

    private async Task SearchProducts()
    {
        var productsResponse = await ProductService.GetAllAsync();
        if (productsResponse.IsSuccess)
        {
            _products = productsResponse.Data ?? [];
        }
        else
        {
            Console.WriteLine($"Error loading products: {productsResponse.Message}");
        }
    }
}